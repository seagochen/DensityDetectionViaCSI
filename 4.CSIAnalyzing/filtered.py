import numpy as np
import matplotlib.pyplot as plt

from utilities.MatrixPreprocessor import preprocess_matrix, amplitude_matrix
from filter.KalmanFilter import kalman_filter

from plot.DynamicLineChart import DynamicLineChart


def filter_signal(raw_signal):

    # Define the parameters of Kalman filter
    initial_state_estimate = np.array([0.0])  # 初始状态估计值
    initial_estimate_covariance = np.eye(1)  # 初始状态估计的协方差矩阵
    process_noise_covariance = np.diag([0.01])  # 过程噪音协方差矩阵
    measurement_noise_covariance = 0.04  # 测量噪音的方差

    # Using Kalman filter to filter the raw signal
    filtered_signal = kalman_filter(raw_signal,
                                    initial_state_estimate,
                                    initial_estimate_covariance,
                                    process_noise_covariance,
                                    measurement_noise_covariance)

    return filtered_signal


def main():
    # raw data of one single frame of CSI
    raw_data = [[[[-141, -3], [-144, 4], [-148, 14], [-143, 20], [-147, 33], [-143, 33], [-143, 43], [-146, 38],
                  [-142, 46], [-140, 42], [-139, 39], [-138, 42], [-143, 39], [-139, 41], [-140, 43], [-140, 37],
                  [-140, 41], [-144, 45], [-149, 42], [-152, 39], [-152, 36], [-158, 36], [-158, 33], [-159, 30],
                  [-163, 33], [-176, 24], [-172, 29], [-170, 33], [-171, 33], [-181, 28], [-181, 34], [-179, 40],
                  [-188, 36], [-181, 38], [-186, 43], [-180, 47], [-181, 48], [-177, 52], [-177, 56], [-174, 54],
                  [-168, 63], [-167, 59], [-163, 68], [-154, 64], [-148, 72], [-141, 77], [-131, 81], [-122, 82],
                  [-115, 86], [-104, 83], [-98, 82], [-89, 81], [-80, 79], [-71, 77], [-68, 71], [-53, 68]],
                 [[-57, 17], [-54, 17], [-56, 20], [-59, 17], [-54, 33], [-54, 35], [-49, 38], [-56, 42], [-51, 43],
                  [-50, 47], [-47, 50], [-45, 49], [-48, 52], [-48, 54], [-41, 58], [-41, 57], [-33, 56], [-38, 63],
                  [-37, 63], [-33, 60], [-31, 62], [-27, 63], [-30, 59], [-28, 65], [-31, 64], [-31, 59], [-24, 60],
                  [-31, 58], [-27, 52], [-34, 56], [-28, 58], [-33, 57], [-26, 56], [-27, 62], [-31, 58], [-28, 59],
                  [-34, 62], [-34, 67], [-30, 70], [-30, 69], [-26, 66], [-29, 67], [-24, 67], [-22, 70], [-25, 72],
                  [-20, 68], [-17, 71], [-12, 70], [-7, 68], [1, 69], [6, 65], [7, 61], [7, 60], [9, 54], [16, 42],
                  [14, 38]],
                 [[119, 234], [139, 229], [161, 228], [177, 212], [191, 211], [204, 197], [218, 187], [230, 177],
                  [234, 167], [239, 155], [248, 153], [247, 144], [252, 133], [252, 125], [253, 121], [252, 119],
                  [245, 107], [246, 103], [249, 95], [242, 83], [238, 87], [234, 85], [230, 77], [226, 79], [217, 69],
                  [220, 67], [210, 74], [201, 64], [180, 66], [183, 66], [173, 69], [167, 62], [160, 73], [157, 70],
                  [143, 76], [140, 82], [137, 77], [131, 80], [129, 84], [131, 89], [124, 93], [128, 91], [120, 95],
                  [123, 93], [124, 105], [122, 97], [127, 96], [127, 97], [129, 94], [136, 104], [140, 94], [146, 88],
                  [144, 78], [147, 67], [152, 55], [151, 44]]],
                [[[-193, 0], [-202, 12], [-200, 27], [-196, 39], [-210, 59], [-205, 64], [-204, 82], [-196, 80],
                  [-193, 91], [-191, 92], [-187, 96], [-185, 101], [-179, 97], [-174, 103], [-176, 108], [-173, 105],
                  [-170, 108], [-165, 103], [-167, 99], [-162, 96], [-169, 93], [-170, 94], [-169, 93], [-169, 85],
                  [-166, 78], [-181, 73], [-181, 70], [-177, 71], [-180, 65], [-192, 61], [-194, 63], [-192, 57],
                  [-201, 56], [-203, 58], [-209, 57], [-206, 56], [-208, 52], [-210, 55], [-210, 53], [-216, 55],
                  [-219, 60], [-224, 56], [-220, 64], [-216, 63], [-223, 75], [-219, 79], [-218, 86], [-214, 89],
                  [-210, 102], [-209, 110], [-205, 123], [-198, 131], [-181, 136], [-170, 145],
                  [-166, 159], [-141, 160]],
                 [[24, -27], [24, -32], [20, -36], [17, -43], [12, -40], [8, -41], [4, -40], [0, -39], [0, -39],
                  [-1, -37], [-4, -34], [-3, -38], [-12, -34], [-14, -31], [-13, -27], [-12, -24], [-9, -27],
                  [-14, -25], [-12, -23], [-13, -24], [-14, -20], [-14, -17], [-13, -13], [-14, -11], [-13, -12],
                  [-13, -12], [-11, -10], [-12, -12], [-12, -9], [-13, -7], [-12, -4], [-11, -3], [-10, 0], [-9, 1],
                  [-8, 0], [-10, 3], [-9, 2], [-10, 8], [-6, 9], [-4, 16], [-3, 10], [-1, 11], [0, 10], [0, 16],
                  [-2, 11], [4, 12], [4, 19], [10, 18], [13, 15], [13, 13], [15, 14], [14, 15], [15, 12], [18, 10],
                  [19, 10], [24, 5]],
                 [[1, 128], [10, 130], [19, 137], [28, 133], [32, 132], [40, 128], [49, 128], [52, 124], [56, 123],
                  [59, 121], [63, 116], [60, 112], [64, 110], [64, 107], [62, 104], [61, 100], [59, 99], [56, 99],
                  [57, 95], [56, 93], [51, 93], [48, 89], [48, 92], [42, 88], [44, 91], [46, 87], [37, 91], [37, 93],
                  [29, 91], [28, 92], [26, 90], [27, 91], [22, 91], [22, 92], [20, 88], [17, 91], [17, 93], [14, 94],
                  [17, 94], [17, 90], [15, 89], [19, 85], [16, 94], [19, 89], [13, 86], [17, 87], [18, 83], [15, 85],
                  [14, 84], [10, 84], [13, 78], [13, 79], [17, 82], [17, 79], [21, 74], [22, 79]]],
                [[[63, -10], [62, -16], [60, -22], [58, -28], [58, -34], [52, -35], [49, -38], [46, -42],
                  [41, -43], [38, -43], [35, -44], [33, -45], [30, -47], [27, -44], [25, -44], [23, -42], [21, -42],
                  [16, -39], [17, -38], [15, -39], [15, -36], [14, -35], [14, -34], [15, -32], [12, -32], [13, -30],
                  [13, -28], [10, -27], [10, -27], [11, -27], [11, -25], [11, -22], [12, -24], [11, -21], [10, -22],
                  [10, -20], [10, -18], [10, -17], [9, -17], [9, -16], [8, -13], [9, -13], [8, -13], [10, -13],
                  [9, -11], [9, -11], [11, -10], [11, -8], [11, -7], [11, -7], [12, -8], [12, -9], [12, -9],
                  [12, -9], [13, -10], [11, -9]],
                 [[-49, -46], [-53, -42], [-58, -36], [-60, -33], [-63, -28], [-65, -24], [-66, -21], [-66, -19],
                  [-67, -14], [-69, -12], [-69, -10], [-70, -7], [-67, -5], [-68, -3], [-67, 0], [-67, 0], [-65, 6],
                  [-66, 7], [-63, 8], [-61, 10], [-61, 10], [-59, 12], [-59, 11], [-57, 11], [-56, 12], [-53, 12],
                  [-53, 13], [-52, 11], [-48, 13], [-49, 11], [-48, 12], [-48, 12], [-45, 13], [-46, 11], [-43, 10],
                  [-45, 12], [-43, 10], [-44, 11], [-43, 10], [-44, 11], [-43, 11], [-41, 11], [-41, 11], [-40, 12],
                  [-41, 14], [-39, 13], [-39, 16], [-38, 17], [-36, 19], [-35, 23], [-33, 24], [-29, 25], [-26, 26],
                  [-23, 26], [-18, 25], [-16, 27]],
                 [[-3, 19], [-2, 19], [-1, 20], [1, 19], [-1, 19], [0, 20], [0, 19], [0, 21], [-3, 22], [-3, 23],
                  [-6, 25], [-5, 24], [-7, 27], [-8, 29], [-9, 30], [-11, 32], [-9, 31], [-9, 35], [-9, 38], [-7, 38],
                  [-9, 40], [-7, 43], [-7, 44], [-8, 45], [-4, 48], [-4, 49], [-3, 48], [-1, 52], [1, 52], [2, 52],
                  [2, 52], [7, 53], [5, 52], [7, 56], [8, 53], [10, 55], [12, 53], [14, 55], [17, 54], [18, 54],
                  [19, 52], [22, 51], [26, 49], [27, 48], [28, 46], [31, 43], [32, 42], [34, 38], [36, 34], [36, 32],
                  [37, 30], [38, 26], [37, 21], [38, 17], [36, 13], [35, 8]]]]

    # convert the data to a numpy array
    data = np.array(raw_data)

    # process the data into the format we want
    data = preprocess_matrix(data)

    # now get the amplitude of the complex matrix
    signal = amplitude_matrix(data)

    # print the shape of the data, and the data's type
    print(data.shape, data[0][0][0].dtype)  # (3, 3, 56) complex128

    # Prepare the plot
    chart = DynamicLineChart()

    # Add the data to the plot
    for i in range(3):
        for j in range(3):
            raw_signal = signal[i][j]
            filtered_signal = filter_signal(raw_signal)

            # Add the data to the plot
            chart.insert_data(raw_signal, f"Raw Signal {i}{j}")
            chart.insert_data(filtered_signal, f"Filtered Signal {i}{j}")

    # Generate the plot
    chart.show_plot()


if __name__ == '__main__':
    main()
